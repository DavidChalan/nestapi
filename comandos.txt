# instalar 
npm install @nestjs/config
npm install --save-dev @types/node

npm install -g @nestjs/cli

nest generate interface products

nest generate module products

nest generate module clientes --no-spec

nest generate controller clientes --no-spec

nest generate service clientes --no-spec

nest generate class products/dto/products.dto


!!! nest generate resource alumno --no-spec ¡¡¡

npm i @nestjs/typeorm mysql2

nest generate resource usuario --no-spec (nos crea un directorio que se llame usuario con el dto y los entities)

  @Delete(':id')
  findProducts(@Param('id', ParseIntPipe) producto: number): string {
    return `El producto ${producto} sera borrado`;}
  # Esto deniega para que solo se pueda utilizar numeros





npm i class-validator class-transformer

------------------
URL , para verificar errores en nest 
https://docs.nestjs.com/exception-filters

URL , procesos de validacion

https://desarrolloweb.com/articulos/validaciones-avanzadas-nest-framework


https://hackernoon.com/lang/es/la-hoja-de-trucos-de-diseno-del-sistema-estilos-api-rest-graphql-websocket-webhook-rpcgrpc-soap






  # borrado de la parte de products.controller , del video 5 Primer ejemplo controlador servicio NEST

   @Get('camiseta')
  findDetalle(): string {
    return 'camisetas!!';
  }
  @Get('camiseta/roja')
  findAdios(): string {
    return 'total de camisetas rojas!!';
  }
  @Get('query')
  busqueda(@Query() consulta): string {
    return `Estas consultando por el ${consulta.articulo} con el precio minimo ${consulta.precioMin} y un precio maximo ${consulta.precioMax}`;
  }
  //   @Get(':id')
  //   findById(@Param() parametros: any): string {
  //     return `Obteniendo productos del parametro ${parametros.id}`;
  //   }
  //   @Get('hot')
  //   findhot(): string {
  //     return 'Productos calientes!';
  //   }
  //   @Get(':id/:size')
  //   findByIDSize(@Param() tipo: datos): string {
  //     return `obnteniendo productos del tipos ${tipo} y tamaño ${tamano}`;
  //   }

  @Get(':id?/:size?')
  findWithOptional(@Param() params: datos) {
    const { id, size } = params;
    if (size && id) {
      return `Item ${id} de tamaño ${size}`;
    } else if (id) {
      return `Todos los items de tamaño ${id}`;
    } else {
      return 'Todos los items';
    }
  }
  // @Post()
  // insertaProducts(
  //   @Body('articulo') producto: string,
  //   @Body('precio') precio: number,
  // ): string {
  //   return `El productoo ${producto} de precio ${precio} se a insertado correctamente`;
  // }
  @Post()
  insertaProducts(@Body() producto: Product) {
    if (producto.articulo === 'tablet')
      return {
        status: HttpStatus.OK,
        message: `El producto ${producto.articulo} de precio ${producto.precio} se a insertado correctamente`,
      };
    else {
      return {
        status: HttpStatus.NOT_ACCEPTABLE,
        message: `solo se pueden introducír árticulos de tables`,
      };
    }
  }
  @Put(':id')
  actualizaProducts(@Param() ruta: any, @Body() actualizar: any): string {
    return `El producto ${actualizar.id} tiene que actualizar el articulo a ${actualizar.articulo} y precio a ${actualizar.precio}`;
  }
  @Delete(':id')
  findProducts(@Param('id', ParseIntPipe) producto: number): string {
    return `El producto ${producto} sera borrado`;
  }
}
}








{
  1. Las entities son para crear las tablas



}

como utilizar la funcion find
https://desarrolloweb.com/articulos/metodo-find-repositorios-typeorm




video 12 Gestionar varios repositorios e incluir funciones al repositorio

nest generate module api
nest generate resource api/users --no-spec

dentro de src , crearemos una carpeta _api

u luego usamos este comando 
*nest generate resource _api/posts
*nest generate resource _api/users